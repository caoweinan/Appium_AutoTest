{"name": "test_run[run_case0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: 'noReset' must be of type boolean\nStacktrace:\nInvalidArgumentError: 'noReset' must be of type boolean\n    at validateCaps (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:52:11)\n    at parseCaps (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:154:20)\n    at processCapabilities (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:199:43)\n    at parseCapsForInnerDriver (/usr/local/lib/node_modules/appium/lib/utils.js:112:21)\n    at AppiumDriver.createSession (/usr/local/lib/node_modules/appium/lib/appium.js:290:26)\n    at commandExecutor (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver.js:330:9)\n    at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver.js:344:15)\n    at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/lib/appium.js:496:26)\n    at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:306:34)\n    at /usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:432:15\n    at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\n    at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:137:13)\n    at Route.dispatch (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:112:3)\n    at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\n    at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:281:22\n    at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)\n    at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)\n    at logger (/usr/local/lib/node_modules/appium/node_modules/morgan/index.js:144:5)\n    at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:317:13)\n    at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:284:7\n    at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)", "trace": "cmdopt = \"{'host': '127.0.0.1', 'port': '4723', 'bpport': '4724', 'udid': 'WQVNW18305004438', 'systemPort': 8200}\"\n\n    @pytest.fixture(scope=\"session\")\n    def start_appium_desired(cmdopt):\n        opt = eval(cmdopt)\n        # {'host': '127.0.0.1', 'port': '4723', 'bpport': '4724', 'udid': None}\n        host = opt[\"host\"]\n        port = opt[\"port\"]\n        bpport = opt[\"bpport\"]\n        udid = opt[\"udid\"]\n        systemPort = opt[\"systemPort\"]\n        # print(opt)\n        driver = None\n        if udid in get_devices():\n            appium_start(host, port, bpport, udid)\n            time.sleep(5)\n            if not check_port():\n>               driver = appium_desired_caps(host, port,systemPort)\n\ntestcase/conftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/DesireCaps.py:36: in appium_desired_caps\n    driver = webdriver.Remote('http://%s:%s/wd/hub'%(host,port), desired_caps)\n/Library/Python/3.8/site-packages/appium/webdriver/webdriver.py:257: in __init__\n    super().__init__(\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n/Library/Python/3.8/site-packages/appium/webdriver/webdriver.py:346: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104baf670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"\\'noReset\\' must be of type boolean\",\"stackt...   at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: 'noReset' must be of type boolean\nE       Stacktrace:\nE       InvalidArgumentError: 'noReset' must be of type boolean\nE           at validateCaps (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:52:11)\nE           at parseCaps (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:154:20)\nE           at processCapabilities (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/capabilities.js:199:43)\nE           at parseCapsForInnerDriver (/usr/local/lib/node_modules/appium/lib/utils.js:112:21)\nE           at AppiumDriver.createSession (/usr/local/lib/node_modules/appium/lib/appium.js:290:26)\nE           at commandExecutor (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver.js:330:9)\nE           at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/basedriver/driver.js:344:15)\nE           at AppiumDriver.executeCommand (/usr/local/lib/node_modules/appium/lib/appium.js:496:26)\nE           at asyncHandler (/usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:306:34)\nE           at /usr/local/lib/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:432:15\nE           at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\nE           at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:137:13)\nE           at Route.dispatch (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/route.js:112:3)\nE           at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\nE           at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:281:22\nE           at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)\nE           at next (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:275:10)\nE           at logger (/usr/local/lib/node_modules/appium/node_modules/morgan/index.js:144:5)\nE           at Layer.handle [as handle_request] (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/layer.js:95:5)\nE           at trim_prefix (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:317:13)\nE           at /usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:284:7\nE           at Function.process_params (/usr/local/lib/node_modules/appium/node_modules/express/lib/router/index.js:335:12)\n\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/errorhandler.py:245: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "f00f229e-0e97-4b8f-ae75-a442aa19ff7f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "run_case", "value": "{'TC_ID': 'TC_Login', 'CASE_ID': 'Case_001', '是否运行': 'y', '用例名称': '登录失败', '测试数据': 'username=14400000000,password=1234567', '期望结果': '错误', '备注': '登录功能测试', '描述': '登录功能测试'}"}], "start": 1691584595487, "stop": 1691584595487, "uuid": "3194edac-220a-47bc-b396-fc0e3a26b180", "historyId": "8fd4a77310d0d4a25bc0d9622138b739", "testCaseId": "d0da37f9ca5c76a26b8f92b7592b9368", "fullName": "testcase.TestKeywords.TestKeyword#test_run", "labels": [{"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "TestKeywords"}, {"name": "subSuite", "value": "TestKeyword"}, {"name": "host", "value": "cwn.local"}, {"name": "thread", "value": "16315-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.TestKeywords"}]}